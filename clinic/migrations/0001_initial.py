# Generated by Django 2.2.4 on 2019-08-13 16:12

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClinicUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('realname', models.CharField(blank=True, max_length=50, null=True, verbose_name='姓名')),
                ('phone_num', models.CharField(blank=True, max_length=50, null=True, verbose_name='电话号码')),
                ('campus', models.CharField(choices=[('ZGC', 'ZhongGuanCun'), ('LX', 'LiangXiang')], default='LX', max_length=5, verbose_name='校区')),
                ('school', models.CharField(blank=True, max_length=20, null=True, verbose_name='学院')),
                ('work_mon', models.BooleanField(default=False, verbose_name='周一值班')),
                ('work_tue', models.BooleanField(default=False, verbose_name='周二值班')),
                ('work_wedn', models.BooleanField(default=False, verbose_name='周三值班')),
                ('work_thu', models.BooleanField(default=False, verbose_name='周四值班')),
                ('work_fri', models.BooleanField(default=False, verbose_name='周五值班')),
                ('work_sat', models.BooleanField(default=False, verbose_name='周六值班')),
                ('work_sun', models.BooleanField(default=False, verbose_name='周天值班')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realname', models.CharField(blank=True, max_length=50, null=True, verbose_name='姓名')),
                ('phone_num', models.CharField(blank=True, max_length=50, null=True, verbose_name='电话号码')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, '上单未解决'), (1, '预约待确认'), (2, '预约已确认'), (3, '预约已驳回'), (4, '登记待受理'), (5, '正在处理'), (6, '已解决问题'), (7, '建议返厂'), (8, '扔给明天')], verbose_name='状态')),
                ('is_appointment', models.BooleanField(blank=True, null=True, verbose_name='是否预约')),
                ('campus', models.CharField(choices=[('ZGC', 'ZhongGuanCun'), ('LX', 'LiangXiang')], max_length=50, verbose_name='校区')),
                ('appointment_time', models.DateField(blank=True, null=True, verbose_name='预约日期')),
                ('arrive_time', models.DateTimeField(blank=True, null=True, verbose_name='到达时间')),
                ('description', models.CharField(blank=True, max_length=300, null=True, verbose_name='问题自述')),
                ('worker_description', models.CharField(blank=True, max_length=300, null=True, verbose_name='问题描述')),
                ('deal_time', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('model', models.CharField(blank=True, max_length=30, null=True, verbose_name='电脑型号')),
                ('method', models.CharField(blank=True, max_length=300, null=True, verbose_name='处理方法')),
                ('reject_reason', models.CharField(blank=True, max_length=300, null=True, verbose_name='拒绝理由')),
                ('password', models.CharField(blank=True, max_length=30, null=True, verbose_name='密码')),
                ('is_taken', models.BooleanField(default=False, verbose_name='是否取走')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='顾客', to=settings.AUTH_USER_MODEL)),
                ('worker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='维修人员', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
    ]
